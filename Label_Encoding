import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

dataset = pd.read_csv('sal.csv', names = ['age', 'workclass',
                                          'fnlwgt', 'education',
                                          'education-num',
                                          'marital-status',
                                          'occupation',
                                          'relationship',
                                          'race',
                                          'gender',
                                          'capital-gain',
                                          'capital-loss',
                                          'hours-per-week',
                                          'native-country',
                                          'salary'], na_values = ' ?')


X = dataset.iloc[:, 0:14].values
y = dataset.iloc[:, -1].values

#encoding salary
from sklearn.preprocessing import LabelEncoder
labelencoder_y = LabelEncoder()
y = labelencoder_y.fit_transform(y)

#Encoded Workclass(column by column differently)
#Labelencoder doesn't accept list
##X[:, 0] = labelencoder_X.fit_transform(X[:, 0].astype(str))
labelencoder_X = LabelEncoder()
X[:, 1] = labelencoder_X.fit_transform(X[:, 1].astype(str))
#labelencoder_X = LabelEncoder()
#X[:, 2] = labelencoder_X.fit_transform(X[:, 2].astype(str))
labelencoder_X = LabelEncoder()
X[:, 3] = labelencoder_X.fit_transform(X[:, 3].astype(str))
#labelencoder_X = LabelEncoder()
#X[:, 4] = labelencoder_X.fit_transform(X[:, 4].astype(str))
labelencoder_X = LabelEncoder()
X[:, 5] = labelencoder_X.fit_transform(X[:, 5].astype(str))
labelencoder_X = LabelEncoder()
X[:, 6] = labelencoder_X.fit_transform(X[:, 6].astype(str))
labelencoder_X = LabelEncoder()
X[:, 7] = labelencoder_X.fit_transform(X[:, 7].astype(str))
labelencoder_X = LabelEncoder()
X[:, 8] = labelencoder_X.fit_transform(X[:, 8].astype(str))
labelencoder_X = LabelEncoder()
X[:, 9] = labelencoder_X.fit_transform(X[:, 9].astype(str))
labelencoder_X = LabelEncoder()
#X[:, 10] = labelencoder_X.fit_transform(X[:,10].astype(str))
#labelencoder_X = LabelEncoder()
#X[:, 11] = labelencoder_X.fit_transform(X[:, 11].astype(str))
#labelencoder_X = LabelEncoder()
#X[:, 12] = labelencoder_X.fit_transform(X[:, 12].astype(str))
labelencoder_X = LabelEncoder()
X[:, 13] = labelencoder_X.fit_transform(X[:, 13].astype(str))
#labelencoder_X = LabelEncoder()
#X[:, 14] = labelencoder_X.fit_transform(X[:, 14].astype(str))

from sklearn.preprocessing import Imputer
imputer = Imputer()
X[:, 0:14] = imputer.fit_transform(X[:, 0:14])

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, random_state = 0)

from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier(n_neighbors = 3)
knn.fit(X_train, y_train)

y_pred = knn.predict(X_test)
#from sklearn.linear_model import LogisticRegression
#log_reg = LogisticRegression()
#log_reg.fit(X, y)

knn.score(X_train, y_train)

knn.score(X_test, y_test)

knn.score(X, y)

from sklearn.tree import DecisionTreeClassifier
dtf = DecisionTreeClassifier(max_depth = 2)
dtf.fit(X_train, y_train)

dtf.score(X_train, y_train)
dtf.score(X_test, y_test)
dtf.score(X, y)

dtf.predict(X[[69999, 12345, 45612], 0:784])
